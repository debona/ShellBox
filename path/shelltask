#!/bin/bash
#
# Task executer
# PARAMETERS
#  $1 => the task file to load
# [$2 => the task command to call]
# [$+ => task sub-command options]


SHELLTASK_ROOT="$( cd -P "`dirname "$0"`/.." && pwd )"
if [[ -z $SHELLTASK_DIRS ]]
then
	SHELLTASK_DIRS="$SHELLTASK_ROOT/tasks"
fi


# All this vars are reachable by the task functions
if [[ `basename "$0"` = "shelltask" ]]
then
	TASK_NAME=$( basename "$1" )
	CMD_NAME="$2"
	shift 2 # Remove $TASK_NAME and $CMD_NAME from parameters list
else
	TASK_NAME=$( basename "$0" )
	CMD_NAME="$1"
	shift 1 # Remove $CMD_NAME from parameters list
fi

source "$SHELLTASK_ROOT/shelltask_functions.sh"
TASK_FILE=$( locate_taskfile ${TASK_NAME}.task.sh )


require "cli.task.sh"
require "regex.task.sh"

initializeANSI
[[ -t 1 ]] || dropANSI
[[ -t 2 ]] || dropANSI

function shelltask() {

	if ! require "${TASK_NAME}.task.sh"
	then
		cli_failure "Can't load the task:" "$TASK_NAME:"
		return 1
	fi

	local cmd_function="${TASK_NAME}_${CMD_NAME}"

	if [[ "$CMD_NAME" = "help" ]]
	then
		require "analyse.task.sh"
		analyse_task_doc $TASK_FILE | less -R

	elif type $cmd_function &> /dev/null # if cmd_function can be called (i.e. is a function)
	then
		$cmd_function "$@"

	else # Otherwise, print repo help
		cli_failure "This command does not exist:"
		echo "	- ${boldon}${purplef}$TASK_NAME ${redf}$CMD_NAME${reset}"

		require "analyse.task.sh"
		local cmd_list=$( analyse_extract_commands $TASK_FILE)
		echo "Available commands for this task:"
		echo "$cmd_list" | sed -E "s:(.*):	- ${boldon}${purplef}$TASK_NAME ${bluef}\1${reset}:g"
	fi

}

shelltask "$@"

#!/bin/bash
#
# Library command executer
# This script execute library commands of a given library. It is the only script which can be execute.
#
# @param	lib_file	The library file
# @param	command		The library command to run
# @params	options		All the library command options


####################################################################
###########                 GLOBAL VARS                  ###########
####################################################################

LIB_DIR="$( cd -P "`dirname "$1"`" && pwd )"

# Ensure the `LIB_DIR` is present in `PATH`.
[[ ":$PATH:" =~ ":$LIB_DIR:" ]] || PATH="$LIB_DIR:$PATH"

unset LIB_DIR # Avoid to leak.


####################################################################
###########               GLOBAL FUNCTIONS               ###########
####################################################################

## Source the library file.
# This mechanism rely on the `locate_library_file` function.
# Return 1 if the file can't be sourced
#
# @param	lib_name_or_file	the library name or path to a library file to source
function require() {
	local lib_name="$1"
	local status=0

	if [[ -x $lib_name ]]
	then
		local lib_file="$lib_name"
	else
		lib_name=$( basename_auto "$lib_name" )
		local lib_file=$( locate_library_file $lib_name )
	fi

	if ! source "$lib_file"
	then
		status=$?
		echo "$lib_name cannot be sourced from path:"
		echo "PATH=$PATH"
	fi

	return $status
}


## Find a library file across all directories present in PATH.
# It print the path of the first library file which match (the same way as PATH).
# Return 1 if the file can't be found in PATH
#
# @param	lib_name	The name of the library to locate
function locate_library_file() {
	local lib_name="$1"
	local library_dirs=$( echo $PATH | tr ':' ' ' )
	local fullpath=$( find $library_dirs -maxdepth 1 -type f -regex ".*/${lib_name}[\.a-zA-Z]*" 2> /dev/null | head -1 )

	[[ -n $fullpath ]] && echo "$fullpath" || return 1
}


## List all library file names which are available in PATH
#
function list_libraries() {
	local library_dirs=$( echo $PATH | tr ':' ' ' )
	local possible_file=$( find $library_dirs -maxdepth 1 -type f )
	grep --binary-file=without-match --files-with-matches '^#!/usr/bin/env shellbox$' $possible_file \
		| xargs -n 1 -J {} awk '{ if ( NR == 1 && $0 ~ "^#!/usr/bin/env shellbox$") { print FILENAME; exit 0; } else { exit 1; } }' {} \
		| sed -E 's:.*/([^/]+)$:\1:g' | sort -u
} 2> /dev/null


## List all library names which are available in PATH
#
function list_library_names() {
	list_libraries | sed -E 's:([^\.]+)(\..*):\1:g'
}


## List all commands available in the given library
#
# @param	lib_name	The name of the library
function list_library_commands() {
	local lib_name="$1"

	local reg="^${lib_name}::"
	local declared_func
	if [[ -n "$BASH" ]]
	then
		declared_func=$( require "$lib_name" && typeset -F | sed 's/declare -f //g' ) # the require is inside the fork to avoid to leak all the functions
	else
		declared_func=$( require "$lib_name" && functions | grep ' \(\) {' | sed 's/ \(\) \{//g' )
	fi
	echo "$declared_func" | egrep "$reg" | sed -E "s/$reg//g"
}


####################################################################
###########               PRIVATE FUNCTIONS              ###########
####################################################################

## Prints the name of the file, without any extension.
#
# @param	file	The file
function basename_auto() {
	local name=$( basename "$1" )
	echo "${name%%.*}"
}


## Print the command function for the given library and command.
# Return 1 if the command does not exist.
#
# @param	library_name	the library name
# @param	cmd_name	the command
function _command_function() {
	local library_name="$1"
	local cmd_name="$2"

	local cmd_function="${library_name}::${cmd_name}"
	if type $cmd_function &> /dev/null
	then
		echo $cmd_function
		return
	fi

	return 1
}


## Run a library command with options.
# This is the main function of shellbox.
#
# @param	lib_name_or_file	the library name or path to a library file
# @param	cmd_name			the command name
# @params	options				the options
function run_library_command() {
	local lib_name_or_file="$1"
	local cmd_name="$2"

	shift # can't run `shift 2` because if there is only one arg, it doesn't shift at all
	shift

	require "${lib_name_or_file}" || return 1

	local lib_name=$( basename_auto "$lib_name_or_file" )

	if _command_function "$lib_name" "$cmd_name" &> /dev/null
	then
		# The library command exists
		local cmd_function=$( _command_function "$lib_name" "$cmd_name" )
		$cmd_function "$@"
	else
		# The library command does not exist
		# Display the error
		require 'cli'
		cli::failure "This command does not exist:"
		echo "	- ${boldon}${purplef}$lib_name ${redf}$cmd_name${reset}"
		# Run the help command on the library
		local cmd_function=$( _command_function "$lib_name" "help" )
		$cmd_function
		return 1
	fi
}


####################################################################
###########               EXEC LIB COMMAND               ###########
####################################################################

if [[ -r "$1" ]]
then
	run_library_command "$@"
elif type "$1" &> /dev/null
then
	"$@"
fi

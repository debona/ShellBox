#!/usr/bin/env shellbox
#
# Auto-completion commands library.

require 'shared'


####################################################################
###########                  COMMANDS                    ###########
####################################################################


## autocompletion function called when TAB key is pressed
#
# @param	comp_count			the number of completed "words"
# @param	lib_name_or_file	the library name or file name
function complete::dispatch() {
	local comp_count=$1
	local lib_name=$( basename_auto "$2" )

	local param_number=0
	((param_number = comp_count + 2))
	local current="${!param_number}" # it can be empty

	shift 2

	{
		if [[ $comp_count -lt 2 ]] # the user is currently completing the cmd_name (parameter #2)
		then
			complete::commands "$lib_name"
		else # comp_count >= 2
			local option_number=0
			((option_number = comp_count - 1))

			complete::option "$option_number" "$lib_name" "$@"
		fi
	} 2> /dev/null | tr ' ' "\n" | egrep "^$current"
}


## List all commands of a library file
#
# @param	lib_name	the library name
function complete::commands() {
	local lib_name="$1"

	list_library_commands "$lib_name"
}

## Try to auto-complete the nth parameter of the given command
#
# @param	option_number	the number the option to complete
# @param	lib_name		the library name
# @param	cmd_name		the command name
function complete::option() {
	local n="$1"
	local lib_name="$2"
	local lib_file=$( locate_library_file "$lib_name" )
	local cmd_name="$3"

	require 'analyse'
	local n_raw_params=$( cat "$lib_file" \
		| analyse::function_raw_doc "${lib_name}::${cmd_name}" \
		| analyse::function_raw_input \
		| egrep "@params?" \
		| head -n $n )

	local comp_func=$( echo "$n_raw_params" | egrep "^@params" | tail -1 | sed -E "s:@params$input_comp_name:\2:g" )
	[[ -z $comp_func ]] && comp_func=$( echo "$n_raw_params" | awk "NR==$n{print;exit}" | sed -E "s:@param$input_comp_name:\2:g" )
	eval "$comp_func"
}

## Complete the command options as a sub-library
# The sub-library command should use this completion like this: @params {complete::sublibrary $@}	blah	blah blah
#
# @param	comp_count	the number of completed "words"
# @param	lib_name	the original library name
# @params	words		the other words
function complete::sublibrary() {
	local comp_count=$1
	shift 2 # remove `comp_count` and `lib_name`

	complete::dispatch $comp_count $@ # this way, `cmd_name` is used as the new `lib_name`
}